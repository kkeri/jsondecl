
JSONDL {

	// module

	Module = Declaration*

	Declaration =
		| ImportDeclaration
		| ExportDeclaration
		| ConstDeclaration

	ImportDeclaration =
		| "import" ImportClause "from" string #term -- list

	ImportClause =
		| NamedImports

	NamedImports =
		| "{" "}" -- empty
		| "{" NonemptyListOf<ImportSpecifier, ","> ","? "}" -- list

	ImportSpecifier =
		| identifier "as" identifier -- rename
		| identifier -- simple

	ExportDeclaration =
		| "export" ConstDeclaration -- const
		| "export" "default" Expression #term -- default
		| ~DeclarationKeyword Expression #term -- bare

	ConstDeclaration = "const" DeclarationListItem #term

	DeclarationList = NonemptyListOf<DeclarationListItem, ",">

	DeclarationListItem = identifier "=" Expression

	// expressions

	Expression = LetIn | LogicalOr

	LetIn = "let" DeclarationList "in" Expression

	LogicalOr = NonemptyListOf<LogicalAnd, "|">

	LogicalAnd = NonemptyListOf<LogicalNot, "&">

	LogicalNot = "!"* Primary

	Primary =
		| Literal
		| Grouping
		| SetConstructor
		| Call
		| Member
		| Ref

	Literal =
		| ObjectPattern
		| ArrayPattern
		| number
		| String
		| regexp
		| constant

	Grouping = "(" Expression ")"

	SetConstructor = "set"

	Call = Primary "(" ListOf<Expression, ","> ")"

	Member = Primary "." identifier

	Ref = identifier

	ObjectPattern (an object pattern) = "{" ListOf<PropertyPattern, ","> "}"

	ArrayPattern (an array pattern) =
		| "[" ListOf<ArrayItemPattern, ","> "]" Cardinality -- cardinality
		| "[" ListOf<ArrayItemPattern, ","> "]" -- default

	String = string

	// helpers

	PropertyPattern (a property pattern) =
		| Expression Cardinality ":" Expression -- cardinality
		| Expression ":" Expression -- default
		| Expression "-" -- deny

	ArrayItemPattern (an array item pattern) =
		| Expression Cardinality -- cardinality
		| Expression -- default

	Cardinality = "?" | "*" | "+" | "-" | NumericCardinality

	NumericCardinality =
		| "{" natural "}" -- single
		| "{" natural "," "}" -- min
		| "{" natural "," natural "}" -- range

	DeclarationKeyword = "import" | "export" | "const"

	// lexical rules

	space := "\t" | " " | "\n" | "\r" | comment
	spaceInline = "\t" | " " | commentInline
	comment = blockComment | lineEndComment
	commentInline = blockCommentInline | lineEndComment
	blockComment = "/*" (~"*/" any)* "*/"
	blockCommentInline = "/*" (~("*/" | "\n" | "\r") any)* "*/"
	lineEndComment = "//" (~("\n" | "\r") any)*
	term =
		| space* (";" | end)
		| spaceInline* ("\r" | "\n" | end)

	identifier (an indentifier) = identifierStart identifierPart*
	identifierStart = "A".."Z" | "a".."z" | "_"
	identifierPart = identifierStart | digit

	number (a number) = "-"? natural ("." fractionalPart)? exponentPart?
	natural = positiveInteger | "0"
	positiveInteger = nonZeroDigit digit*
	fractionalPart = digit+
	exponentPart = ("e" | "E") ("+" | "-")? digit+
	nonZeroDigit = "1".."9"

	string (a string) = "\"" stringCharacter* "\""
	stringCharacter = normalChar | escapeSequence
	normalChar = ~("\"" | "\\" | "\u0000".."\u001f") any
	escapeSequence = "\\" escapeSpec
	escapeSpec =
		| "\""
		| "\\"
		| "\\/"
		| "b"
		| "f"
		| "n"
		| "r"
		| "t"
		| unicodeEscapeSpec
	unicodeEscapeSpec = "u" hexDigit hexDigit hexDigit hexDigit

	regexp (a regular expression) = "/" regexpBody "/" regexpFlags
	regexpBody = ("\\/" | ~"/" any)+
	regexpFlags = ("A".."Z" | "a".."z")*

	constant =
		| "this" -- this
		| "null" -- null
		| "true" -- true
		| "false" -- false
}

