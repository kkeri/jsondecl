{"version":3,"sources":["../src/model.js"],"names":["Module","importList","declList","decls","exports","defaultExport","undefined","value","id","Error","test","Import","moduleSpec","ImportItem","originalId","localId","Const","body","exported","Expression","new","target","LogicalOr","items","item","LogicalAnd","LogicalNot","expr","ChainedCall","calls","max","length","i","eval","validate","Call","args","source","Object_","properties","index","occ","Array","fill","Object","getOwnPropertyNames","name","prop","minCount","maxCount","Array_","isArray","vidx","o","Property","ListItem","Literal","Regexp","regexp"],"mappings":"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","file":"model.js","sourcesContent":["\nexport class Module {\n  constructor (importList, declList) {\n    this.importList = importList\n    this.declList = declList\n    this.decls = {}\n    this.exports = {}\n    this.defaultExport = undefined\n  }\n\n  test (value, id = '') {\n    if (id === '') {\n      if (!this.defaultExport) {\n        throw new Error('attempt to test against the default declaration but it is not declared')\n      }\n      return this.defaultExport.test(value)\n    } else {\n      if (!(id in this.exports)) {\n        throw new Error(`attempt to test against '${id}' but it is not declared`)\n      }\n      return this.exports[id].test(value)\n    }\n  }\n}\n\nexport class Import {\n  constructor (moduleSpec, importList) {\n    this.moduleSpec = moduleSpec\n    this.importList = importList\n  }\n}\n\nexport class ImportItem {\n  constructor (originalId, localId) {\n    this.originalId = originalId\n    this.localId = localId\n  }\n}\n\nexport class Const {\n  constructor (id, body, exported) {\n    this.id = id\n    this.body = body\n    this.exported = exported\n  }\n\n  test (value) {\n    return this.body.test(value)\n  }\n}\n\n// expression\n\nexport class Expression {\n  constructor () {\n    if (new.target === Expression) {\n      throw new Error(`can't instantiate abstract class`)\n    }\n  }\n\n  test (value) {\n    throw new Error(`can't call abstract method`)\n  }\n}\n\nexport class LogicalOr extends Expression {\n  constructor (items) {\n    super()\n    this.items = items\n  }\n\n  test (value) {\n    for (let item of this.items) {\n      if (item.test(value)) {\n        return true\n      }\n    }\n    return false\n  }\n}\n\nexport class LogicalAnd extends Expression {\n  constructor (items) {\n    super()\n    this.items = items\n  }\n\n  test (value) {\n    for (let item of this.items) {\n      if (!item.test(value)) {\n        return false\n      }\n    }\n    return true\n  }\n}\n\nexport class LogicalNot extends Expression {\n  constructor (expr) {\n    super()\n    this.expr = expr\n  }\n\n  test (value) {\n    return !this.expr.test(value)\n  }\n}\n\nexport class ChainedCall extends Expression {\n  constructor (calls) {\n    super()\n    this.calls = calls\n  }\n\n  test (value) {\n    let max = this.calls.length - 1\n    for (let i = 0; i < max; i++) {\n      value = this.calls[i].eval(value)\n    }\n    return this.calls[max].validate(value)\n  }\n}\n\nexport class Call extends Expression {\n  constructor (id, args) {\n    super()\n    this.id = id\n    this.args = args\n  }\n\n  eval () {\n    return this.value\n  }\n\n  test (value) {\n    this.source.eval()\n  }\n}\n\nexport class Object_ extends Expression {\n  constructor (properties) {\n    super()\n    this.properties = properties\n    for (let i = 0; i < properties.length; i++) {\n      properties[i].index = i\n    }\n  }\n\n  test (value) {\n    if (typeof value !== 'object' || value === null) {\n      return false\n    }\n    let occ = new Array(this.properties.length).fill(0)\n    // this should be optimized to be nearly linear\n    // tip: most property names will be simply strings\n    for (let name of Object.getOwnPropertyNames(value)) {\n      let test = false\n      for (let prop of this.properties) {\n        if (prop.name.test(name) && prop.value.test(value[name])) {\n          test = true\n          occ[prop.index]++\n        }\n      }\n      if (!test) {\n        return false\n      }\n    }\n    for (let prop of this.properties) {\n      if (occ[prop.index] < prop.minCount || occ[prop.index] > prop.maxCount) {\n        return false\n      }\n    }\n    return true\n  }\n}\n\nexport class Array_ extends Expression {\n  constructor (items) {\n    super()\n    this.items = items\n  }\n\n  test (value) {\n    if (!Array.isArray(value)) {\n      return false\n    }\n    let vidx = 0\n    for (let item of this.items) {\n      let o = 0\n      while (o < item.maxCount && vidx < value.length && item.test(value[vidx++])) {\n        o++\n      }\n      if (o < item.minCount) {\n        return false\n      }\n    }\n    return true\n  }\n}\n\n// helpers\n\nexport class Property extends Expression {\n  constructor (name, value, minCount, maxCount) {\n    super()\n    this.name = name\n    this.value = value\n    this.minCount = minCount || 1\n    this.maxCount = maxCount || 1\n  }\n}\n\nexport class ListItem extends Expression {\n  constructor (value) {\n    super()\n    this.value = value\n  }\n}\n\n// leaf nodes\n\nexport class Literal extends Expression {\n  constructor (value) {\n    super()\n    this.value = value\n  }\n\n  eval () {\n    return this.value\n  }\n\n  test (value) {\n    return this.value === value\n  }\n}\n\nexport class Regexp extends Expression {\n  constructor (regexp) {\n    super()\n    this.regexp = regexp\n  }\n\n  eval () {\n    return this.regexp\n  }\n\n  test (value) {\n    return this.regexp.test(value)\n  }\n}\n"]}