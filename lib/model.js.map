{"version":3,"sources":["../src/model.js"],"names":["Module","importList","declList","decls","exports","defaultExport","undefined","Import","moduleSpec","ImportItem","origId","localId","Const","id","value","exported","Expression","new","target","Error","LogicalOr","items","item","match","LogicalAnd","ChainedCall","calls","max","length","i","eval","validate","Call","args","source","NativeCall","func","Object_","properties","index","occ","Array","fill","Object","getOwnPropertyNames","name","prop","minCount","maxCount","Array_","isArray","vidx","o","Property","ListItem","Identifier","Literal","Regexp","regexp","test"],"mappings":"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","file":"model.js","sourcesContent":["\r\nexport class Module {\r\n  constructor (importList, declList) {\r\n    this.importList = importList\r\n    this.declList = declList\r\n    this.decls = {}\r\n    this.exports = {}\r\n    this.defaultExport = undefined\r\n  }\r\n}\r\n\r\nexport class Import {\r\n  constructor (moduleSpec, importList) {\r\n    this.moduleSpec = moduleSpec\r\n    this.importList = importList\r\n  }\r\n}\r\n\r\nexport class ImportItem {\r\n  constructor (origId, localId) {\r\n    this.origId = origId\r\n    this.localId = localId\r\n  }\r\n}\r\n\r\nexport class Const {\r\n  constructor (id, value, exported) {\r\n    this.id = id\r\n    this.value = value\r\n    this.exported = exported\r\n  }\r\n}\r\n\r\n// expression\r\n\r\nexport class Expression {\r\n  constructor () {\r\n    if (new.target === Expression) {\r\n      throw new Error(`can't instantiate abstract class`)\r\n    }\r\n  }\r\n\r\n  match (value) {\r\n    throw new Error(`can't call abstract method`)\r\n  }\r\n}\r\n\r\nexport class LogicalOr extends Expression {\r\n  constructor (items) {\r\n    super()\r\n    this.items = items\r\n  }\r\n\r\n  match (value) {\r\n    for (let item of this.items) {\r\n      if (item.match(value)) {\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n}\r\n\r\nexport class LogicalAnd extends Expression {\r\n  constructor (items) {\r\n    super()\r\n    this.items = items\r\n  }\r\n\r\n  match (value) {\r\n    for (let item of this.items) {\r\n      if (!item.match(value)) {\r\n        return false\r\n      }\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\nexport class ChainedCall extends Expression {\r\n  constructor (calls) {\r\n    super()\r\n    this.calls = calls\r\n  }\r\n\r\n  match (value) {\r\n    let max = this.calls.length - 1\r\n    for (let i = 0; i < max; i++) {\r\n      value = this.calls[i].eval(value)\r\n    }\r\n    return this.calls[max].validate(value)\r\n  }\r\n}\r\n\r\nexport class Call extends Expression {\r\n  constructor (id, args) {\r\n    super()\r\n    this.id = id\r\n    this.args = args\r\n  }\r\n\r\n  eval () {\r\n    return this.value\r\n  }\r\n\r\n  match (value) {\r\n    this.source.eval()\r\n  }\r\n}\r\n\r\nexport class NativeCall extends Expression {\r\n  constructor (func, args) {\r\n    super()\r\n    this.func = func\r\n    this.args = args\r\n  }\r\n\r\n  eval () {\r\n    return this.func.eval()\r\n  }\r\n\r\n  match (value) {\r\n    this.source.eval()\r\n  }\r\n}\r\n\r\nexport class Object_ extends Expression {\r\n  constructor (properties) {\r\n    super()\r\n    this.properties = properties\r\n    for (let i = 0; i < properties.length; i++) {\r\n      properties[i].index = i\r\n    }\r\n  }\r\n\r\n  match (value) {\r\n    if (typeof value !== 'object' || value === null) {\r\n      return false\r\n    }\r\n    let occ = new Array(this.properties.length).fill(0)\r\n    // this should be optimized to be nearly linear\r\n    // tip: most property names will be simply strings\r\n    for (let name of Object.getOwnPropertyNames(value)) {\r\n      let match = false\r\n      for (let prop of this.properties) {\r\n        if (prop.name.match(name) && prop.value.match(value[name])) {\r\n          match = true\r\n          occ[prop.index]++\r\n        }\r\n      }\r\n      if (!match) {\r\n        return false\r\n      }\r\n    }\r\n    for (let prop of this.properties) {\r\n      if (occ[prop.index] < prop.minCount || occ[prop.index] > prop.maxCount) {\r\n        return false\r\n      }\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\nexport class Array_ extends Expression {\r\n  constructor (items) {\r\n    super()\r\n    this.items = items\r\n  }\r\n\r\n  match (value) {\r\n    if (!Array.isArray(value)) {\r\n      return false\r\n    }\r\n    let vidx = 0\r\n    for (let item of this.items) {\r\n      let o = 0\r\n      while (o < item.maxCount && vidx < value.length && item.match(value[vidx++])) {\r\n        o++\r\n      }\r\n      if (o < item.minCount) {\r\n        return false\r\n      }\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nexport class Property extends Expression {\r\n  constructor (name, value, minCount, maxCount) {\r\n    super()\r\n    this.name = name\r\n    this.value = value\r\n    this.minCount = minCount || 1\r\n    this.maxCount = maxCount || 1\r\n  }\r\n}\r\n\r\nexport class ListItem extends Expression {\r\n  constructor (value) {\r\n    super()\r\n    this.value = value\r\n  }\r\n}\r\n\r\n// leaf nodes\r\n\r\nexport class Identifier extends Expression {\r\n  constructor (name) {\r\n    super()\r\n    this.name = name\r\n  }\r\n\r\n  bind () {\r\n    return this\r\n  }\r\n}\r\n\r\nexport class Literal extends Expression {\r\n  constructor (value) {\r\n    super()\r\n    this.value = value\r\n  }\r\n\r\n  eval () {\r\n    return this.value\r\n  }\r\n\r\n  match (value) {\r\n    return this.value === value\r\n  }\r\n}\r\n\r\nexport class Regexp extends Expression {\r\n  constructor (regexp) {\r\n    super()\r\n    this.regexp = regexp\r\n  }\r\n\r\n  eval () {\r\n    return this.regexp\r\n  }\r\n\r\n  match (value) {\r\n    return this.regexp.test(value)\r\n  }\r\n}\r\n"]}