{"version":3,"sources":["../src/model.js"],"names":["Module","imports","decls","value","cc","Import","moduleSpec","importList","Const","id","exported","Expression","new","target","Error","LogicalOr","items","item","match","module","LogicalAnd","ChainedCall","calls","max","length","i","eval","validate","Call","args","source","NativeCall","func","Object_","properties","index","occ","Array","fill","Object","getOwnPropertyNames","name","prop","minCount","maxCount","Array_","isArray","vidx","o","Property","ListItem","Identifier","Literal","evaluable","Regexp","regexp","test"],"mappings":"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","file":"model.js","sourcesContent":["\r\nexport class Module {\r\n  constructor (imports, decls, value) {\r\n    this.imports = imports\r\n    this.decls = decls\r\n    this.value = value\r\n  }\r\n\r\n  compile (cc) {\r\n\r\n  }\r\n}\r\n\r\nexport class Import {\r\n  constructor (moduleSpec, importList) {\r\n    this.moduleSpec = moduleSpec\r\n    this.importList = importList\r\n  }\r\n}\r\n\r\nexport class Const {\r\n  constructor (id, value, exported) {\r\n    this.id = id\r\n    this.value = value\r\n    this.exported = exported\r\n  }\r\n}\r\n\r\n// expression\r\n\r\nexport class Expression {\r\n  constructor () {\r\n    if (new.target === Expression) {\r\n      throw new Error(`can't instantiate abstract class`)\r\n    }\r\n  }\r\n\r\n  eval () {\r\n    throw new Error(`can't call abstract method`)\r\n  }\r\n\r\n  match (value) {\r\n    throw new Error(`can't call abstract method`)\r\n  }\r\n}\r\n\r\nexport class LogicalOr extends Expression {\r\n  constructor (items) {\r\n    super()\r\n    this.items = items\r\n  }\r\n\r\n  eval () {\r\n    throw new Error(`invalid model: a logical operator can't be chained`)\r\n  }\r\n\r\n  match (value) {\r\n    for (let item of this.items) {\r\n      if (item.match(value)) {\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  bind (module) {\r\n\r\n  }\r\n}\r\n\r\nexport class LogicalAnd extends Expression {\r\n  constructor (items) {\r\n    super()\r\n    this.items = items\r\n  }\r\n\r\n  eval () {\r\n    throw new Error(`invalid model: a logical operator can't be chained`)\r\n  }\r\n\r\n  match (value) {\r\n    for (let item of this.items) {\r\n      if (!item.match(value)) {\r\n        return false\r\n      }\r\n    }\r\n    return true\r\n  }\r\n\r\n  bind (module) {\r\n\r\n  }\r\n}\r\n\r\nexport class ChainedCall extends Expression {\r\n  constructor (calls) {\r\n    super()\r\n    this.calls = calls\r\n  }\r\n\r\n  eval () {\r\n    throw new Error(`invalid model: a ChainedCall can't be chained`)\r\n  }\r\n\r\n  match (value) {\r\n    let max = this.calls.length - 1\r\n    for (let i = 0; i < max; i++) {\r\n      value = this.calls[i].eval(value)\r\n    }\r\n    return this.calls[max].validate(value)\r\n  }\r\n\r\n  bind (module) {\r\n\r\n  }\r\n}\r\n\r\nexport class Call extends Expression {\r\n  constructor (id, args) {\r\n    super()\r\n    this.id = id\r\n    this.args = args\r\n  }\r\n\r\n  eval () {\r\n    return this.value\r\n  }\r\n\r\n  match (value) {\r\n    this.source.eval()\r\n  }\r\n\r\n  bind (module) {\r\n\r\n  }\r\n}\r\n\r\nexport class NativeCall extends Expression {\r\n  constructor (func, args) {\r\n    super()\r\n    this.func = func\r\n    this.args = args\r\n  }\r\n\r\n  eval () {\r\n    return this.func.eval()\r\n  }\r\n\r\n  match (value) {\r\n    this.source.eval()\r\n  }\r\n\r\n  bind (module) {\r\n\r\n  }\r\n}\r\n\r\nexport class Object_ extends Expression {\r\n  constructor (properties) {\r\n    super()\r\n    this.properties = properties\r\n    for (let i = 0; i < properties.length; i++) {\r\n      properties[i].index = i\r\n    }\r\n  }\r\n\r\n  match (value) {\r\n    if (typeof value !== 'object' || value === null) {\r\n      return false\r\n    }\r\n    let occ = new Array(this.properties.length).fill(0)\r\n    // this should be optimized to be nearly linear\r\n    // tip: most property names will be simply strings\r\n    for (let name of Object.getOwnPropertyNames(value)) {\r\n      let match = false\r\n      for (let prop of this.properties) {\r\n        if (prop.name.match(name) && prop.value.match(value[name])) {\r\n          match = true\r\n          occ[prop.index]++\r\n        }\r\n      }\r\n      if (!match) {\r\n        return false\r\n      }\r\n    }\r\n    for (let prop of this.properties) {\r\n      if (occ[prop.index] < prop.minCount || occ[prop.index] > prop.maxCount) {\r\n        return false\r\n      }\r\n    }\r\n    return true\r\n  }\r\n\r\n  bind (module) {\r\n\r\n  }\r\n}\r\n\r\nexport class Array_ extends Expression {\r\n  constructor (items) {\r\n    super()\r\n    this.items = items\r\n  }\r\n\r\n  match (value) {\r\n    if (!Array.isArray(value)) {\r\n      return false\r\n    }\r\n    let vidx = 0\r\n    for (let item of this.items) {\r\n      let o = 0\r\n      while (o < item.maxCount && vidx < value.length && item.match(value[vidx++])) {\r\n        o++\r\n      }\r\n      if (o < item.minCount) {\r\n        return false\r\n      }\r\n    }\r\n    return true\r\n  }\r\n\r\n  bind (module) {\r\n\r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nexport class Property extends Expression {\r\n  constructor (name, value, minCount, maxCount) {\r\n    super()\r\n    this.name = name\r\n    this.value = value\r\n    this.minCount = minCount || 1\r\n    this.maxCount = maxCount || 1\r\n  }\r\n}\r\n\r\nexport class ListItem extends Expression {\r\n  constructor (value) {\r\n    super()\r\n    this.value = value\r\n  }\r\n}\r\n\r\n// leaf nodes\r\n\r\nexport class Identifier extends Expression {\r\n  constructor (name) {\r\n    super()\r\n    this.name = name\r\n  }\r\n\r\n  bind () {\r\n    return this\r\n  }\r\n}\r\n\r\nexport class Literal extends Expression {\r\n  constructor (value) {\r\n    super()\r\n    this.evaluable = false\r\n  }\r\n\r\n  eval () {\r\n    return this.value\r\n  }\r\n\r\n  match (value) {\r\n    return this.value === value\r\n  }\r\n\r\n  bind () {\r\n    return this\r\n  }\r\n}\r\n\r\nexport class Regexp extends Expression {\r\n  constructor (regexp) {\r\n    super()\r\n    this.regexp = regexp\r\n    this.evaluable = false\r\n  }\r\n\r\n  match (value) {\r\n    return this.regexp.test(value)\r\n  }\r\n\r\n  bind () {\r\n    return this\r\n  }\r\n}\r\n"]}