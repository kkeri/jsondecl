{"version":3,"sources":["../src/model.js"],"names":["Module","imports","decls","value","cc","Import","moduleSpec","importList","Const","id","exported","Expression","new","target","Error","evalable","LogicalOr","items","item","match","module","LogicalAnd","ChainedCall","calls","max","length","i","eval","validate","Call","args","source","NativeCall","func","Object","properties","index","occ","Array","fill","getOwnPropertyNames","name","prop","minCount","maxCount","List","isArray","vidx","o","Property","ListItem","Identifier","Literal","Regexp","regexp","test"],"mappings":"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","file":"model.js","sourcesContent":["\r\nexport class Module {\r\n  constructor(imports, decls, value) {\r\n    this.imports = imports\r\n    this.decls = decls\r\n    this.value = value\r\n  }\r\n\r\n  compile(cc) {\r\n    \r\n  }\r\n}\r\n\r\nexport class Import {\r\n  constructor(moduleSpec, importList) {\r\n    this.moduleSpec = moduleSpec\r\n    this.importList = importList\r\n  }\r\n}\r\n\r\nexport class Const {\r\n  constructor(id, value, exported) {\r\n    this.id = id\r\n    this.value = value\r\n    this.exported = exported\r\n  }\r\n}\r\n\r\n// expression\r\n\r\nexport class Expression {\r\n  constructor() {\r\n    if (new.target === Expression) {\r\n      throw new Error(`can't instantiate abstract class`)\r\n    }\r\n    this.evalable = false\r\n  }\r\n\r\n  eval() {\r\n    throw new Error(`can't call abstract method`)\r\n  }\r\n\r\n  match(value) {\r\n    throw new Error(`can't call abstract method`)\r\n  }\r\n}\r\n\r\nexport class LogicalOr extends Expression {\r\n  constructor(items) {\r\n    super()\r\n    this.items = items\r\n  }\r\n\r\n  eval() {\r\n    throw new Error(`invalid model: a logical operator can't be chained`)\r\n  }\r\n\r\n  match(value) {\r\n    for (item of this.items) {\r\n      if (item.match(value)) {\r\n        return true\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  bind(module) {\r\n    \r\n  }\r\n}\r\n\r\nexport class LogicalAnd extends Expression {\r\n  constructor(items) {\r\n    super()\r\n    this.items = items\r\n  }\r\n\r\n  eval() {\r\n    throw new Error(`invalid model: a logical operator can't be chained`)\r\n  }\r\n\r\n  match(value) {\r\n    for (item of this.items) {\r\n      if (!item.match(value)) {\r\n        return false\r\n      }\r\n    }\r\n    return true\r\n  }\r\n\r\n  bind(module) {\r\n    \r\n  }\r\n}\r\n\r\nexport class ChainedCall extends Expression {\r\n  constructor(calls) {\r\n    super()\r\n    this.calls = calls\r\n  }\r\n\r\n  eval() {\r\n    throw new Error(`invalid model: a ChainedCall can't be chained`)\r\n  }\r\n\r\n  match(value) {\r\n    let max = this.calls.length - 1\r\n    for (let i = 0; i < max; i++) {\r\n      value = this.calls[i].eval(value)\r\n    }\r\n    return this.calls[max].validate(value)\r\n  }\r\n\r\n  bind(module) {\r\n    \r\n  }\r\n}\r\n\r\nexport class Call extends Expression {\r\n  constructor(id, args) {\r\n    super()\r\n    this.args = args\r\n  }\r\n\r\n  eval() {\r\n    return this.value\r\n  }\r\n\r\n  match(value) {\r\n    this.source.eval()\r\n  }\r\n\r\n  bind(module) {\r\n    \r\n  }\r\n}\r\n\r\nexport class NativeCall extends Expression {\r\n  constructor(func, args) {\r\n    super()\r\n    this.func = func\r\n    this.args = args\r\n  }\r\n\r\n  eval() {\r\n    return this.func.eval()\r\n  }\r\n\r\n  match(value) {\r\n    this.source.eval()\r\n  }\r\n\r\n  bind(module) {\r\n    \r\n  }\r\n}\r\n\r\nexport class Object extends Expression {\r\n  constructor(properties) {\r\n    super()\r\n    this.properties = properties\r\n    for (let i = 0; i < properties.length; i++) {\r\n      properties[i].index = i\r\n    }\r\n  }\r\n\r\n  match(value) {\r\n    if (typeof value !== 'object' || value === null) {\r\n      return false\r\n    }\r\n    let occ = new Array(this.properties.length).fill(0)\r\n    // this should be optimized to be nearly linear\r\n    // tip: most property names will be simply strings\r\n    for (name of Object.getOwnPropertyNames(value)) {\r\n      let match = false\r\n      for (let prop of this.properties) {\r\n        if (prop.name.match(name) && prop.value.match(value[name])) {\r\n          match = true\r\n          occ[prop.index]++\r\n        }\r\n      }\r\n      if (!match) {\r\n        return false\r\n      }\r\n    }\r\n    for (let prop of this.properties) {\r\n      if (occ[i] < prop.minCount || occ[i] > prop.maxCount) {\r\n        return false\r\n      }\r\n    }\r\n    return true\r\n  }\r\n\r\n  bind(module) {\r\n    \r\n  }\r\n}\r\n\r\nexport class List extends Expression {\r\n  constructor(items) {\r\n    super()\r\n    this.items = items\r\n  }\r\n\r\n  match(value) {\r\n    if (!Array.isArray(value)) {\r\n      return false\r\n    }\r\n    let vidx = 0\r\n    for (let item of this.items) {\r\n      let o = 0\r\n      while (o < item.maxCount && vidx < value.length && item.match(value[vidx++])) {\r\n        o++\r\n      }\r\n      if (o < item.minCount) {\r\n        return false\r\n      }\r\n    }\r\n    return true\r\n  }\r\n\r\n  bind(module) {\r\n    \r\n  }\r\n}\r\n\r\n// helpers\r\n\r\nexport class Property extends Expression {\r\n  constructor(name, value, minCount, maxCount) {\r\n    super()\r\n    this.name = name\r\n    this.value = value\r\n    this.minCount = minCount || 1\r\n    this.maxCount = maxCount || 1\r\n  }\r\n}\r\n\r\nexport class ListItem extends Expression {\r\n  constructor(value) {\r\n    super()\r\n    this.value = value\r\n  }\r\n}\r\n\r\n// leaf nodes\r\n\r\nexport class Identifier extends Expression {\r\n  constructor(name) {\r\n    super()\r\n    this.name = name\r\n  }\r\n\r\n  bind() {\r\n    return this\r\n  }\r\n}\r\n\r\nexport class Literal extends Expression {\r\n  constructor(value) {\r\n    super()\r\n    this.evalable = false\r\n  }\r\n\r\n  eval() {\r\n    return this.value\r\n  }\r\n\r\n  match(value) {\r\n    return this.value === value\r\n  }\r\n\r\n  bind() {\r\n    return this\r\n  }\r\n}\r\n\r\nexport class Regexp extends Expression {\r\n  constructor(regexp) {\r\n    super()\r\n    this.regexp = regexp\r\n    this.evalable = false\r\n  }\r\n\r\n  match(value) {\r\n    return this.regexp.test(value)\r\n  }\r\n\r\n  bind() {\r\n    return this\r\n  }\r\n}\r\n"]}