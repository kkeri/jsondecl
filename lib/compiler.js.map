{"version":3,"sources":["../src/compiler.js"],"names":["compile","str","opts","module","cc","CompilerContext","errors","envStack","currentBlock","undefined","block","push","pop","id","decl","decls","error","expr","exported","defaultExport","exports","node","method","buildScope","constructor","name","call","bind","msg","Module","enter","importList","import_","declList","leave","Import","require","moduleSpec","item","origId","declare","localId","compileImportExpression","Const","value","LogicalOr","items","forEach","i","LogicalAnd","ChainedCall","calls","Call","args","map"],"mappings":"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","file":"compiler.js","sourcesContent":["import { parse } from './parser'\n\nexport function compile (str, opts = {}) {\n  const module = parse(str)\n  if (!module) return null\n  const cc = new CompilerContext(module, opts)\n  cc.compile(module)\n  return cc.errors === 0 ? module : null\n}\n\nclass CompilerContext {\n  constructor (module, opts) {\n    this.module = module\n    this.opts = opts\n    this.errors = 0\n    this.envStack = []\n    this.currentBlock = undefined\n  }\n\n  enter (block) {\n    this.envStack.push(this.currentBlock)\n    this.currentBlock = block\n  }\n\n  leave () {\n    this.currentBlock = this.envStack.pop()\n  }\n\n  lookup (id) {\n    let decl = this.currentBlock.decls[id]\n    if (!decl) {\n      this.error(`${id}: undeclared identifier`)\n    } else {\n      return decl\n    }\n  }\n\n  declare (id, expr, exported) {\n    if (!id) {\n      if (this.module.defaultExport) {\n        this.error(`duplicate default export`)\n      } else {\n        this.module.defaultExport = expr\n      }\n    } else if (id in this.currentBlock.decls) {\n      this.error(`${id}: duplicate identifier`)\n    } else {\n      this.currentBlock.decls[id] = expr\n      if (exported) {\n        this.module.exports[id] = expr\n      }\n    }\n  }\n\n  buildScope (node) {\n    let method = buildScope[node.constructor.name]\n    if (method) method.call(node, this)\n  }\n\n  bind (node) {\n    let method = bind[node.constructor.name]\n    if (method) {\n      return method.call(node, this)\n    } else {\n      return node\n    }\n  }\n\n  compileImportExpression (expr) {\n    // todo: check type of import and handle accordingly\n    return expr\n  }\n\n  error (msg) {\n    this.errors++\n    this.opts.error && this.opts.error(msg)\n  }\n}\n\nconst buildScope = {\n\n  Module (cc) {\n    cc.enter(this.decls)\n    for (let import_ of this.importList) {\n      cc.buildScope(import_)\n    }\n    for (let decl of this.declList) {\n      cc.buildScope(decl)\n    }\n    cc.leave()\n  },\n\n  Import (cc) {\n    const module = require(this.moduleSpec)\n    for (let item of this.importList) {\n      if (item.origId in module) {\n        cc.declare(item.localId, cc.compileImportExpression(module[item.origId]))\n      } else {\n        cc.error(`${item.origId}: identifier not defined in module ` +\n          `'${this.moduleSpec}'`)\n      }\n    }\n  },\n\n  Const (cc) {\n    cc.declare(this.id, this, this.exported)\n    cc.buildScope(this.value)\n  },\n\n  LogicalOr (cc) {\n    this.items.forEach(i => cc.buildScope(i))\n  },\n\n  LogicalAnd (cc) {\n    this.items.forEach(i => cc.buildScope(i))\n  },\n\n  ChainedCall (cc) {\n    this.calls.forEach(i => cc.buildScope(i))\n  },\n\n  Call (cc) {\n    this.args.forEach(i => cc.buildScope(i))\n  }\n}\n\nconst bind = {\n\n  Module (cc) {\n    cc.enter(this.decls)\n    for (let import_ of this.importList) {\n      cc.buildScope(import_)\n    }\n    for (let decl of this.declList) {\n      decl.buildScope(cc)\n    }\n    cc.leave()\n    return this\n  },\n\n  Import (cc) {\n    const module = require(this.moduleSpec)\n    for (let item of this.importList) {\n      if (item.origId in module) {\n        cc.declare(item.localId, cc.compileImportExpression(module[item.origId]))\n      } else {\n        cc.error(`${item.origId}: identifier not defined in module ` +\n          `'${this.moduleSpec}'`)\n      }\n    }\n  },\n\n  Const (cc) {\n    cc.declare(this.id, cc.compile(this.value), this.exported)\n  },\n\n  LogicalOr (cc) {\n    this.items = this.items.map(i => cc.compile(i))\n    return this\n  },\n\n  LogicalAnd (cc) {\n    this.items = this.items.map(i => cc.compile(i))\n    return this\n  },\n\n  ChainedCall (cc) {\n    this.calls = this.calls.map(i => cc.compile(i))\n    return this\n  },\n\n  Call (cc) {\n    this.calls = this.calls.map(i => cc.compile(i))\n    return this\n  }\n}\n"]}