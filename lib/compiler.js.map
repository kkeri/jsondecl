{"version":3,"sources":["../src/compiler.js"],"names":["compile","str","opts","module","error","cc","CompilerContext","importPath","filename","buildBlock","errors","bind","envStack","currentBlock","undefined","block","push","pop","id","decl","decls","body","expr","exported","defaultExport","exports","node","method","constructor","name","call","msg","Module","enter","importList","import_","declList","leave","Import","donor","require","moduleSpec","item","originalId","declare","localId","compileImportExpression","Const","LogicalOr","items","forEach","i","LogicalAnd","ChainedCall","calls","Call","args","func","lookup","Object_","properties","Array_","Property","value"],"mappings":"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","file":"compiler.js","sourcesContent":["import { parse } from './parser'\nimport { dirname, join } from 'path'\n\nexport function compile (str, opts = {}) {\n  const module = parse(str, {\n    error: opts.error\n  })\n  if (!module) return null\n  const cc = new CompilerContext(module, {\n    error: opts.error || function () {},\n    importPath: dirname(opts.filename)\n  })\n  cc.buildBlock(module)\n  if (cc.errors) return null\n  cc.bind(module)\n  if (cc.errors) return null\n  return module\n}\n\nclass CompilerContext {\n  constructor (module, opts) {\n    this.module = module\n    this.opts = opts\n    this.errors = 0\n    this.envStack = []\n    this.currentBlock = undefined\n  }\n\n  enter (block) {\n    this.envStack.push(this.currentBlock)\n    this.currentBlock = block\n  }\n\n  leave () {\n    this.currentBlock = this.envStack.pop()\n  }\n\n  lookup (id) {\n    let decl = this.currentBlock.decls[id]\n    if (decl) {\n      return decl.body\n    } else {\n      this.error(`${id}: undeclared identifier`)\n    }\n  }\n\n  declare (id, expr, exported) {\n    if (!id) {\n      if (this.module.defaultExport) {\n        this.error(`duplicate default export`)\n      } else {\n        this.module.defaultExport = expr\n      }\n    } else if (id in this.currentBlock.decls) {\n      this.error(`${id}: duplicate identifier`)\n    } else {\n      this.currentBlock.decls[id] = expr\n      if (exported) {\n        this.module.exports[id] = expr\n      }\n    }\n  }\n\n  buildBlock (node) {\n    let method = buildBlock[node.constructor.name]\n    if (method) method.call(node, this)\n  }\n\n  bind (node) {\n    let method = bind[node.constructor.name]\n    if (method) method.call(node, this)\n  }\n\n  compileImportExpression (expr) {\n    // todo: check type of import and handle accordingly\n    return expr\n  }\n\n  error (msg) {\n    this.errors++\n    this.opts.error(msg)\n  }\n}\n\nconst buildBlock = {\n\n  Module (cc) {\n    cc.enter(this)\n    for (let import_ of this.importList) {\n      cc.buildBlock(import_)\n    }\n    for (let decl of this.declList) {\n      cc.buildBlock(decl)\n    }\n    cc.leave()\n  },\n\n  Import (cc) {\n    if (!cc.opts.importPath) {\n      cc.error(`using import requires the 'importPath' option`)\n      return\n    }\n    const donor = require(join(cc.opts.importPath, this.moduleSpec))\n    for (let item of this.importList) {\n      if (item.originalId in donor) {\n        cc.declare(item.localId,\n          cc.compileImportExpression(donor[item.originalId]))\n      } else {\n        cc.error(`${item.originalId}: identifier not defined in module ` +\n          `'${this.moduleSpec}'`)\n      }\n    }\n  },\n\n  Const (cc) {\n    cc.declare(this.id, this, this.exported)\n    cc.buildBlock(this.body)\n  },\n\n  LogicalOr (cc) {\n    this.items.forEach(i => cc.buildBlock(i))\n  },\n\n  LogicalAnd (cc) {\n    this.items.forEach(i => cc.buildBlock(i))\n  },\n\n  ChainedCall (cc) {\n    this.calls.forEach(i => cc.buildBlock(i))\n  },\n\n  Call (cc) {\n    this.args.forEach(i => cc.buildBlock(i))\n  }\n}\n\nconst bind = {\n\n  Module (cc) {\n    cc.enter(this)\n    for (let decl of this.declList) {\n      cc.bind(decl)\n    }\n    cc.leave()\n  },\n\n  Const (cc) {\n    cc.bind(this.body)\n    return this\n  },\n\n  LogicalOr (cc) {\n    this.items.forEach(i => cc.bind(i))\n  },\n\n  LogicalAnd (cc) {\n    this.items.forEach(i => cc.bind(i))\n  },\n\n  ChainedCall (cc) {\n    this.calls.forEach(i => cc.bind(i))\n  },\n\n  Call (cc) {\n    this.func = cc.lookup(this.id)\n    this.args.forEach(i => cc.bind(i))\n  },\n\n  Object_ (cc) {\n    this.properties.forEach(i => cc.bind(i))\n  },\n\n  Array_ (cc) {\n    this.items.forEach(i => cc.bind(i))\n  },\n\n  Property (cc) {\n    cc.bind(this.name)\n    cc.bind(this.value)\n  }\n}\n"]}