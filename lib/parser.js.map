{"version":3,"sources":["../src/parser.js"],"names":["parse","model","parser","semantics","str","opts","initParser","mr","match","failed","error","message","recipePath","__dirname","recipe","eval","createSemantics","addOperation","modelActions","Module_short","imports","expr","Module","Const","Module_long","decls","declList","exprList","length","push","Import_list","_imp_","_lbr_","items","_rbr_","_from_","moduleSpec","Import","asIteration","ImportItem_simple","id","ImportItem","Declaration_const","_const_","_eq_","Declaration_export_const","_exp_","Declaration_export_default","_def_","LogicalOr","list","LogicalAnd","LogicalNot","Grouping","_lp_","_rp_","ChainedCall","calls","Call","argsOpt","args","Object","_lb_","props","_rb_","Object_","Array","Array_","String","Literal","ArgumentList","Property","name","_colon_","value","identifier","start","rest","source","contents","number","sign","int","_point_","frac","exp","parseFloat","string","quote1","chars","quote2","regexp","slash1","body","slash2","RegExp","constant_null","_null_","constant_true","_true_","constant_false","_false_"],"mappings":"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","file":"parser.js","sourcesContent":["import { readFileSync } from 'fs'\nimport { join } from 'path'\nimport { makeRecipe } from 'ohm-js'\nimport * as model from './model'\n\nvar parser\nvar semantics\n\nexport function parse (str, opts = {}) {\n  if (!parser) {\n    initParser()\n  }\n  let mr = parser.match(str)\n  if (mr.failed()) {\n    if (opts.error) opts.error(mr.message)\n    return null\n  } else {\n    return semantics(mr).model()\n  }\n}\n\n/**\n * Loads parser definition and initilizes parser semantics.\n */\nfunction initParser () {\n  let recipePath = join(__dirname, '../ohm/recipe.js')\n  let recipe = readFileSync(recipePath, 'utf-8')\n  // this is the recommended way of loading a parser\n  parser = makeRecipe(eval(recipe)) // eslint-disable-line\n\n  semantics = parser.createSemantics()\n  semantics.addOperation('model', modelActions)\n}\n\nconst modelActions = {\n\n  // module\n\n  Module_short (imports, expr) {\n    return new model.Module(imports.model(),\n      [new model.Const('', expr.model(), true)])\n  },\n  Module_long (imports, decls, expr) {\n    let declList = decls.model()\n    let exprList = expr.model()\n    if (exprList.length) declList.push(new model.Const('', exprList[0], true))\n    return new model.Module(imports.model(), declList)\n  },\n\n  // import\n\n  Import_list (_imp_, _lbr_, items, _rbr_, _from_, moduleSpec) {\n    return new model.Import(moduleSpec.model(), items.asIteration().model())\n  },\n  ImportItem_simple (id) {\n    return new model.ImportItem(id.model(), id.model())\n  },\n\n  // declaration\n\n  Declaration_const (_const_, id, _eq_, expr) {\n    return new model.Const(id.model(), expr.model(), false)\n  },\n  Declaration_export_const (_exp_, _const_, id, _eq_, expr) {\n    return new model.Const(id.model(), expr.model(), true)\n  },\n  Declaration_export_default (_exp_, _def_, expr) {\n    return new model.Const('', expr.model(), true)\n  },\n\n  // expression\n\n  LogicalOr (list) {\n    let items = list.asIteration().model()\n    if (items.length === 1) {\n      return items[0]\n    } else {\n      return new model.LogicalOr(items)\n    }\n  },\n  LogicalAnd (list) {\n    let items = list.asIteration().model()\n    if (items.length === 1) {\n      return items[0]\n    } else {\n      return new model.LogicalAnd(items)\n    }\n  },\n  LogicalNot (list, expr) {\n    if (list.model().length % 2 === 1) {\n      return new model.LogicalNot(expr.model())\n    } else {\n      return expr.model()\n    }\n  },\n  Grouping (_lp_, expr, _rp_) {\n    return expr.model()\n  },\n  ChainedCall (list) {\n    let calls = list.asIteration().model()\n    if (calls.length === 1) {\n      return calls[0]\n    } else {\n      return new model.ChainedCall(calls)\n    }\n  },\n  Call (id, argsOpt) {\n    argsOpt = argsOpt.model()\n    var args = argsOpt.length ? argsOpt[0] : []\n    return new model.Call(id.model(), args)\n  },\n  Object (_lb_, props, _rb_) {\n    return new model.Object_(props.asIteration().model())\n  },\n  Array (_lb_, items, _rb_) {\n    return new model.Array_(items.asIteration().model())\n  },\n  String (str) {\n    return new model.Literal(str.model())\n  },\n\n  // helpers\n\n  ArgumentList (_lp_, args, _rp_) {\n    return args.asIteration().model()\n  },\n  Property (name, _colon_, value) {\n    return new model.Property(name)\n  },\n\n  // lexical rules\n\n  identifier (start, rest) {\n    return this.source.contents\n  },\n  number (sign, int, _point_, frac, exp) {\n    return new model.Literal(parseFloat(this.source.contents))\n  },\n  string (quote1, chars, quote2) {\n    return chars.source.contents\n  },\n  regexp (slash1, body, slash2) {\n    return new model.RegExp(new RegExp(body.source.contents))\n  },\n  constant_null (_null_) {\n    return new model.Literal(null)\n  },\n  constant_true (_true_) {\n    return new model.Literal(true)\n  },\n  constant_false (_false_) {\n    return new model.Literal(false)\n  }\n}\n"]}